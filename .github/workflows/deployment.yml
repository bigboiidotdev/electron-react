name: Deployment

on:
  release:
    types:
      - created

jobs:
  increment-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract tag name prefix
        id: extract-prefix
        run: |
          TAG_NAME=${{ github.event.release.tag_name }}
          TAG_NAME=${TAG_NAME#v}
          echo "prefix=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Update version in package.json & package-lock.json
        run: |
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.extract-prefix.outputs.prefix }}\"/" release/app/package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.extract-prefix.outputs.prefix }}\"/" release/app/package-lock.json

      - name: Upload app-version artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-version
          path: release/app

  build-win-and-upload-release:
    needs: increment-version
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Download release builds
        uses: actions/download-artifact@v3
        with:
          name: app-version
          path: release/app

      - name: Install dependencies
        run: npm i

      - name: Build Electron app
        run: npm run package -- --win

      - name: Install curl
        run: choco install curl -y

      - name: Get path
        id: file-path
        run: |
          $FILE_PATH = Get-ChildItem -Path ./release/build -Filter "*Setup*.exe" | Select-Object -First 1
          echo "file=$FILE_PATH" >> $GITHUB_OUTPUT


      - name: Setup Certificate
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > Certificate_pkcs12.p12
          cat Certificate_pkcs12.p12
          
      - name: Set variables
        id: variables
        run: |
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH

      - name: Setup SSM KSP on windows latest
        run: |
          curl -X GET  https://stage.one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /quiet /qn
          smksp_registrar.exe list
          smctl.exe keypair ls
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
          smksp_cert_sync.exe

      - name: Find Signtool
        id: signtool
        run: |
          $DIR_path = Get-ChildItem -Path "C:\Program Files (x86)\Microsoft SDKs\Windows\" -Recurse -Include "signtool.exe" | Select-Object -First 1 -ExpandProperty FullName
          echo "dirPath=$DIR_path" >> $GITHUB_OUTPUT

      - name: Signing using signtool
        run: |
          "${{ steps.signtool.outputs.dirPath }}\signtool.exe" sign /sha1 ${{ secrets.THUMBPRINT }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "${{ steps.file-path.outputs.file }}"

      - name: Signtool verify
        run: |
          "${{ steps.signtool.outputs.dirPath }}\signtool.exe" verify /v /pa "${{ steps.file-path.outputs.file }}"

      - name: Upload release
        run: |
          $FILE_PATH = Get-ChildItem -Path ./release/build -Filter "*Setup*.exe" | Select-Object -First 1
          $FILE_NAME = "ElectronReact-${{ github.event.release.tag_name }}-win.exe"
          $URL = "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=$FILE_NAME"

          curl -L -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/octet-stream" --data-binary "@$FILE_PATH" $URL

  build-mac-and-upload-release:
    needs: increment-version
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Download release builds
        uses: actions/download-artifact@v3
        with:
          name: app-version
          path: release/app

      - name: Install dependencies
        run: npm i

      - name: Build Electron app
        run: npm run package -- --mac

      - name: Upload release
        run: |
          FILE_PATH=$(find ./release/build ! -name "*arm64*" -name "*.dmg" | head -n 1)
          FILE_NAME="ElectronReact-${{ github.event.release.tag_name }}-mac.dmg"

          curl -L \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@$FILE_PATH" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=$FILE_NAME"

  cleanups:
    needs: [build-win-and-upload-release, build-mac-and-upload-release]
    runs-on: ubuntu-latest

    steps:
      - name: Delete app-version artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: app-version
