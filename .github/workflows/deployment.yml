name: Deployment

on:
  push:
    branches:
      - main

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Read package.json
        id: read_package_json
        run: |
          echo "version=$(node -p "require('./release/app/package.json').version")" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment_version
        run: |
          VERSION=$(echo "${{ steps.read_package_json.outputs.version }}")
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update package.json & package-lock.json
        run: |
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.new_version }}\"/" release/app/package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.new_version }}\"/" release/app/package-lock.json

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -a -m "Release v${{ env.new_version }} [skip ci]"
          git push

  build-and-package:
    needs: update-version
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm i

      - name: Build Electron app
        run: npm run package -- --win

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-builds
          path: release/build

  create-release:
    needs: [update-version, build-and-package]
    runs-on: ubuntu-latest

    steps:
      - name: Download release builds
        uses: actions/download-artifact@v2
        with:
          name: release-builds
          path: release/build

      # - name: Create release
      #   id: create_release
      #   uses: meeDamian/github-release@2.0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: v${{ needs.increment_version.outputs.new_version }}
      #     name: Release v${{ needs.increment_version.outputs.new_version }}
      #     body: Release builds v${{ needs.increment_version.outputs.new_version }}
      #     files: release/build
      - name: Create release
        id: create_release
        run: |
          echo "v: ${{ env.new_version }}"
          RESPONSE=$(curl -L \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28"\
            https://api.github.com/repos/amirfakhrullah/electron-react/releases \
            -d '{
            "tag_name": "v${{ env.new_version }}",
            "name": "Release v${{ env.new_version }}",
            "draft": false,
            "prerelease": false,
            "generate_release_notes":true
          }')
          echo "Response: $RESPONSE"
          echo "release_id=$(echo "$RESPONSE" | jq -r '.id')" >> $GITHUB_OUTPUT
          echo "release_id: $(echo "$RESPONSE" | jq -r '.id')"

      - name: Upload builds to the release
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/octet-stream" \
          https://uploads.github.com/repos/amirfakhrullah/electron-react/releases/${{ steps.create_release.outputs.release_id }}/assets?name=build \
          --data-binary "@release/build"



