name: Deployment

on:
  push:
    branches:
      - main

jobs:
  increment-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Read package.json
        id: read_package_json
        run: |
          echo "version=$(node -p "require('./release/app/package.json').version")" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment_version
        run: |
          VERSION=$(echo "${{ steps.read_package_json.outputs.version }}")
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json
        run: |
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ steps.increment_version.outputs.new_version }}\"/" release/app/package.json

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -a -m "Bump version [skip ci]"
          git push


  build-and-package:
    needs: increment-version
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get latest
        run: |
          git pull
          git merge main

      - name: Install dependencies
        run: npm i

      - name: Build Electron app
        run: npm run package -- --win

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-build-win
          path: release/build

  create-release:
    needs: build-and-package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download release builds
        uses: actions/download-artifact@v2
        with:
          name: release-builds
          path: release/build-win

      - name: Get the latest version from latest.yml
        id: read_yml_version
        run: |
          VERSION=$(cat ./release/build-win/latest.yml | yq r - version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        run: |
          echo "V: v${{ steps.read_yml_version.outputs.version }}"
          RESPONSE=$(curl -L \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
            -H "X-GitHub-Api-Version: 2022-11-28"\
            https://api.github.com/repos/amirfakhrullah/electron-react/releases \
            -d '{
            "tag_name": "v${{ steps.read_yml_version.outputs.version }}",
            "name": "Release v${{ steps.read_yml_version.outputs.version }}",
            "draft": false,
            "prerelease": false,
            "generate_release_notes":true
          }')
          echo "Response: $RESPONSE"
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Upload release assets
        id: upload_assets
        run: |
          RESPONSE=${{ steps.create_release.outputs.response }}
          RELEASE_ID=$(echo $RESPONSE | jq -r '.id')
          UPLOAD_URL=$(echo $RESPONSE | jq -r '.upload_url' | sed -e "s/{?name,label}//")
          ASSET_PATH="release/build-win/*Source*.exe"
          for file in $ASSET_PATH; do
            echo "Uploading $file..."
            curl -L \
              -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @$file \
              "$UPLOAD_URL?name=$(basename $file)&label=$(basename $file)"
          done



